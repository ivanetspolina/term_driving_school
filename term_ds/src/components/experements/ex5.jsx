import { useState, useEffect } from "react";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { CornerDownLeft, CornerDownRight, MoveDown } from "lucide-react";

export default function Ex5() {
  // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Å—ñ—Ç–∫—É –∑–≥—ñ–¥–Ω–æ –∑ –Ω–∞–¥–∞–Ω–∏–º –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
  // 0 - —Ç—Ä–∞–≤–∞, 1 - –¥–æ—Ä–æ–≥–∞, 2 - –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è, 3 - —á–µ—Ä–≤–æ–Ω–∞ –º–∞—à–∏–Ω–∞, 4 - —Å–∏–Ω—è –º–∞—à–∏–Ω–∞, 5 - –∂–æ–≤—Ç–∏–π –∫–≤–∞–¥—Ä–∞—Ç–∏–∫, 6 - —á–µ—Ä–≤–æ–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç–∏–∫
  const initialGrid = [
    [0, 0, 0, 1, 1, 0, 0, 0],
    [0, 0, 0, 4, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0],
    [1, 1, 1, 2, 2, 1, 1, 1],
    [1, 3, 1, 2, 2, 1, 1, 1],
    [0, 0, 0, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0],
  ];  

  const squarePositions = [
    [2, 2], // –≤–µ—Ä—Ö–Ω—è –ª—ñ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è (#)
    [2, 5], // –≤–µ—Ä—Ö–Ω—è –ø—Ä–∞–≤–∞ –ø–æ–∑–∏—Ü—ñ—è (*)
    [5, 2], // –Ω–∏–∂–Ω—è –ª—ñ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è (*)
    [5, 5], // –Ω–∏–∂–Ω—è –ø—Ä–∞–≤–∞ –ø–æ–∑–∏—Ü—ñ—è (#)
  ];

  const [grid, setGrid] = useState(initialGrid);
  const [redCarPos, setRedCarPos] = useState([4, 1]); // –ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è —á–µ—Ä–≤–æ–Ω–æ—ó –º–∞—à–∏–Ω–∏
  const [blueCarPos, setBlueCarPos] = useState([1, 3]); // –ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è —Å–∏–Ω—å–æ—ó –º–∞—à–∏–Ω–∏
  const [redFinished, setRedFinished] = useState(false);
  const [blueFinished, setBlueFinished] = useState(false);
  const [redDirection, setRedDirection] = useState(null);
  const [blueDirection, setBlueDirection] = useState(null);
  const [redCarPath, setRedCarPath] = useState([]);
  const [blueCarPath, setBlueCarPath] = useState([]);
  const [showDirectionIndicator, setShowDirectionIndicator] = useState(false);
  const gridSize = [initialGrid.length, initialGrid[0].length]; // —Ä–æ–∑–º—ñ—Ä —Å—ñ—Ç–∫–∏ [8, 8]
  const intersectionPos = [3, 3]; // –ª—ñ–≤–∏–π –≤–µ—Ä—Ö–Ω—ñ–π –∫—É—Ç –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è

  // –í–µ–∫—Ç–æ—Ä–∏ —Ä—É—Ö—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–º–∫—É
  const DIRECTIONS = {
    'north': [-1, 0],
    'south': [1, 0],
    'east': [0, 1],
    'west': [0, -1]
  };

  // –ö–∞—Ä—Ç–∞ –ø–æ–≤–æ—Ä–æ—Ç—ñ–≤ (—è–∫–∏–π –Ω–∞–ø—Ä—è–º–æ–∫ –±—É–¥–µ –ø—ñ—Å–ª—è –ø–æ–≤–æ—Ä–æ—Ç—É)
  const TURN_MAP = {
    'north': { 'left': 'west', 'right': 'east', 'straight': 'north' },
    'south': { 'left': 'east', 'right': 'west', 'straight': 'south' },
    'east': { 'left': 'north', 'right': 'south', 'straight': 'east' },
    'west': { 'left': 'south', 'right': 'north', 'straight': 'west' }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –≤–∏–±–æ—Ä—É –Ω–∞–ø—Ä—è–º–∫—É
  const getRandomDirection = () => {
    const directions = ["straight", "left", "right"];
    const randomIndex = Math.floor(Math.random() * directions.length);
    return directions[randomIndex];
  };

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—ñ—Ç–∫–∏ –∑ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞–º–∏ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —à–ª—è—Ö—ñ–≤ –º–∞—à–∏–Ω–æ–∫ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Ä–µ–Ω–¥–µ—Ä—ñ
  useEffect(() => {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å—ñ—Ç–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó
    const newGrid = initialGrid.map((row) => [...row]);

    // –í–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–±–∏—Ä–∞—î–º–æ 2 –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –∂–æ–≤—Ç–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–∏–∫—ñ–≤
    const shuffledPositions = [...squarePositions].sort(
      () => Math.random() - 0.5
    );
    const yellowPositions = shuffledPositions.slice(0, 2);
    const redPositions = shuffledPositions.slice(2, 4);

    // –†–æ–∑–º—ñ—â—É—î–º–æ –∂–æ–≤—Ç—ñ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∏
    yellowPositions.forEach(([row, col]) => {
      newGrid[row][col] = 5; // 5 - –∂–æ–≤—Ç–∏–π –∫–≤–∞–¥—Ä–∞—Ç–∏–∫
    });

    // –†–æ–∑–º—ñ—â—É—î–º–æ —á–µ—Ä–≤–æ–Ω—ñ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∏
    redPositions.forEach(([row, col]) => {
      newGrid[row][col] = 6; // 6 - —á–µ—Ä–≤–æ–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç–∏–∫
    });

    setGrid(newGrid);
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –Ω–∞–ø—Ä—è–º–∫–∏ –¥–ª—è –æ–±–æ—Ö –º–∞—à–∏–Ω
    const redRandomDirection = getRandomDirection();
    const blueRandomDirection = getRandomDirection();
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ø—Ä—è–º–∫–∏
    setRedDirection(redRandomDirection);
    setBlueDirection(blueRandomDirection);
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —à–ª—è—Ö–∏ –¥–ª—è –æ–±–æ—Ö –º–∞—à–∏–Ω
    const redPath = generatePath(redCarPos, redRandomDirection, gridSize, intersectionPos);
    const bluePath = generatePath(blueCarPos, blueRandomDirection, gridSize, intersectionPos);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–ª—è—Ö–∏
    setRedCarPath(redPath);
    setBlueCarPath(bluePath);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ø—Ä—è–º–∫—É –¥–ª—è —Å–∏–Ω—å–æ—ó –º–∞—à–∏–Ω–∫–∏
    setShowDirectionIndicator(true);
    
  }, []);  

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É –ø—ñ–¥—Ö–æ–¥—É –¥–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
  const getApproachDirection = (startPos, intersectionPos) => {
    const [startRow, startCol] = startPos;
    const [intersectionRow, intersectionCol] = intersectionPos;
    
    if (Math.abs(startRow - intersectionRow) > Math.abs(startCol - intersectionCol)) {
      return startRow < intersectionRow ? "south" : "north";
    } else {
      return startCol < intersectionCol ? "east" : "west";
    }
  };

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –º–∞—à–∏–Ω–∞ –Ω–∞ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—ñ
  const isAtIntersection = (pos, intersectionPos) => {
    const [row, col] = pos;
    const [intersectionRow, intersectionCol] = intersectionPos;
    return row >= intersectionRow && row <= intersectionRow + 1 && 
           col >= intersectionCol && col <= intersectionCol + 1;
  };

  // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—Ö—É –≤ –∑–∞–¥–∞–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É
  const moveInDirection = (pos, direction) => {
    const [row, col] = pos;
    const [dr, dc] = DIRECTIONS[direction];
    return [row + dr, col + dc];
  };

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –ø–æ–∑–∏—Ü—ñ—è –≤ –º–µ–∂–∞—Ö —Å—ñ—Ç–∫–∏
  const isValidPosition = (pos, gridSize) => {
    const [row, col] = pos;
    const [rows, cols] = gridSize;
    return row >= 0 && row < rows && col >= 0 && col < cols;
  };

  // –°–ø—Ä–æ—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —à–ª—è—Ö—É
  const generatePath = (startPos, turnDirection, gridSize, intersectionPos) => {
    const [rows, cols] = gridSize;
    const path = [];
    
    // 1. –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ –ø—ñ–¥—Ö–æ–¥—É –¥–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    const approachDirection = getApproachDirection(startPos, intersectionPos);
    
    // 2. –ë—É–¥—É—î–º–æ —à–ª—è—Ö –¥–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    let currentPos = [...startPos];
    while (!isAtIntersection(currentPos, intersectionPos)) {
      currentPos = moveInDirection(currentPos, approachDirection);
      path.push([...currentPos]);
    }
    
    // 3. –í–∏–∑–Ω–∞—á–∞—î–º–æ —à–ª—è—Ö —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–ø—Ä—è–º–∫—É –ø–æ–≤–æ—Ä–æ—Ç—É
    if (turnDirection === 'straight') {
      // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä—É—Ö —É —Ç–æ–º—É –∂ –Ω–∞–ø—Ä—è–º–∫—É
      for (let i = 0; i < 5; i++) {
        currentPos = moveInDirection(currentPos, approachDirection);
        if (isValidPosition(currentPos, gridSize)) {
          path.push([...currentPos]);
        } else {
          break;
        }
      }
    } 
    else if (turnDirection === 'left') {
      // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—ó–∂–¥–∂–∞—î–º–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è –ø—Ä—è–º–æ
      currentPos = moveInDirection(currentPos, approachDirection);
      if (isValidPosition(currentPos, gridSize)) {
        path.push([...currentPos]);
      }
      
      // –ü–æ—Ç—ñ–º –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ª—ñ–≤–æ—Ä—É—á
      const newDirection = TURN_MAP[approachDirection]['left'];
      currentPos = moveInDirection(currentPos, newDirection);
      if (isValidPosition(currentPos, gridSize)) {
        path.push([...currentPos]);
      }
      
      // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä—É—Ö —É –Ω–æ–≤–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É
      for (let i = 0; i < 3; i++) {
        currentPos = moveInDirection(currentPos, newDirection);
        if (isValidPosition(currentPos, gridSize)) {
          path.push([...currentPos]);
        } else {
          break;
        }
      }
    }
    else if (turnDirection === 'right') {
      // –î–ª—è –ø–æ–≤–æ—Ä–æ—Ç—É –Ω–∞–ø—Ä–∞–≤–æ
      const newDirection = TURN_MAP[approachDirection]['right'];
      currentPos = moveInDirection(currentPos, newDirection);
      if (isValidPosition(currentPos, gridSize)) {
        path.push([...currentPos]);
      }
      
      // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä—É—Ö —É –Ω–æ–≤–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É
      for (let i = 0; i < 4; i++) {
        currentPos = moveInDirection(currentPos, newDirection);
        if (isValidPosition(currentPos, gridSize)) {
          path.push([...currentPos]);
        } else {
          break;
        }
      }
    }
    
    return path;
  };

  // –§—É–Ω–∫—Ü—ñ—è —Ä—É—Ö—É –º–∞—à–∏–Ω–∏ –ø–æ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –≤–∏–∑–Ω–∞—á–µ–Ω–æ–º—É —à–ª—è—Ö—É
  const moveCar = (path, carType, setCarPos, onFinish) => {
    path.forEach(([row, col], i) => {
      setTimeout(() => {
        const curPos = carType === "red" ? redCarPos : blueCarPos;
        const newGrid = grid.map((r) => [...r]);
        const [curRow, curCol] = curPos;
        const cellType = getCellType(row, col);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ —Ä—É—Ö–∞—Ç–∏—Å—å –Ω–∞ —Ü—é –∫–ª—ñ—Ç–∏–Ω–∫—É (–¥–æ—Ä–æ–≥–∞ –∞–±–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è)
        const allowed = cellType === 1 || cellType === 2;

        if (!allowed) {
          toast.warn(
            `üö´ –ú–∞—à–∏–Ω–∞ –Ω–µ –º–æ–∂–µ —ó—Ö–∞—Ç–∏ –ø–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ: [${row}, ${col}]`
          );
          return;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—ñ—Ç–∫—É
        newGrid[curRow][curCol] = getCellType(curRow, curCol); // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–∏–ø –∫–ª—ñ—Ç–∏–Ω–∫–∏
        newGrid[row][col] = carType === "red" ? 3 : 4; // —Å—Ç–∞–≤–∏–º–æ –º–∞—à–∏–Ω—É –Ω–∞ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é

        setGrid(newGrid);
        setCarPos([row, col]);

        // –Ø–∫—â–æ —à–ª—è—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤–∏–∫–ª–∏–∫–∞—î–º–æ callback
        if (i === path.length - 1 && onFinish) {
          onFinish();
        }
      }, i * 600); // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫—Ä–æ–∫–∞–º–∏ —Ä—É—Ö—É
    });
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø—É –∫–ª—ñ—Ç–∏–Ω–∫–∏
  const getCellType = (row, col) => {
    if (
      row < 0 ||
      col < 0 ||
      row >= initialGrid.length ||
      col >= initialGrid[0].length
    ) {
      return 0; // –∑–∞ –º–µ–∂–∞–º–∏ —Å—ñ—Ç–∫–∏ - —Ç—Ä–∞–≤–∞
    }

    const cell = initialGrid[row][col];
    // –Ø–∫—â–æ —Ü–µ –º–∞—à–∏–Ω–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–∏–ø –∫–ª—ñ—Ç–∏–Ω–∫–∏ –ø—ñ–¥ –Ω–µ—é
    if (cell === 3 || cell === 4) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
      if ((row === 3 || row === 4) && (col === 3 || col === 4)) {
        return 2; // –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
      }
      return 1; // –¥–æ—Ä–æ–≥–∞
    }
    return cell;
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—Ö—É —á–µ—Ä–≤–æ–Ω–æ—ó –º–∞—à–∏–Ω–∏
  const moveRedCar = () => {
    // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ
    toast.dismiss();

    let directionText = "";
    if (redDirection === "left") directionText = "–ª—ñ–≤–æ—Ä—É—á";
    else if (redDirection === "right") directionText = "–ø—Ä–∞–≤–æ—Ä—É—á";
    else directionText = "–ø—Ä—è–º–æ";

    toast.info(`–ß–µ—Ä–≤–æ–Ω–∞ –º–∞—à–∏–Ω–∞ –ø–æ—á–∞–ª–∞ —Ä—É—Ö ${directionText}`);

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —à–ª—è—Ö
    moveCar(redCarPath, "red", setRedCarPos, () => {
      setRedFinished(true);
      // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∑–∞–≤–µ—Ä—à–∞–ª—å–Ω–æ–≥–æ
      toast.dismiss();
      toast.success("–ß–µ—Ä–≤–æ–Ω–∞ –º–∞—à–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä—É—Ö");
    });
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—Ö—É —Å–∏–Ω—å–æ—ó –º–∞—à–∏–Ω–∏
  const moveBlueCar = () => {
    // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ
    toast.dismiss();

    let directionText = "";
    if (blueDirection === "left") directionText = "–ª—ñ–≤–æ—Ä—É—á";
    else if (blueDirection === "right") directionText = "–ø—Ä–∞–≤–æ—Ä—É—á";
    else directionText = "–ø—Ä—è–º–æ";

    toast.info(`–°–∏–Ω—è –º–∞—à–∏–Ω–∞ –ø–æ—á–∞–ª–∞ —Ä—É—Ö ${directionText}`);

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —à–ª—è—Ö
    moveCar(blueCarPath, "blue", setBlueCarPos, () => {
      setBlueFinished(true);
      // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∑–∞–≤–µ—Ä—à–∞–ª—å–Ω–æ–≥–æ
      toast.dismiss();
      toast.success("–°–∏–Ω—è –º–∞—à–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä—É—Ö");
    });
  };

  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ —á–µ—Ä–≤–æ–Ω—É –º–∞—à–∏–Ω—É
  const handleRedCarClick = () => {
    if (redFinished) {
      // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ
      toast.dismiss();
      toast.info("–ß–µ—Ä–≤–æ–Ω–∞ –º–∞—à–∏–Ω–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä—É—Ö");
      return;
    }

    // –ü–æ—á–∏–Ω–∞—î–º–æ —Ä—É—Ö –∑–∞ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –≤–∏–∑–Ω–∞—á–µ–Ω–∏–º —à–ª—è—Ö–æ–º
    moveRedCar();
  };

  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ —Å–∏–Ω—é –º–∞—à–∏–Ω—É
  const handleBlueCarClick = () => {
    // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ
    toast.dismiss();

    if (!redFinished) {
      toast.error("–ü–æ–º–∏–ª–∫–∞!!! –°–ø–æ—á–∞—Ç–∫—É –º–∞—î —Ä—É—Ö–∞—Ç–∏—Å—å —á–µ—Ä–≤–æ–Ω–∞ –º–∞—à–∏–Ω–∞.");
      return;
    }

    if (blueFinished) {
      toast.info("–°–∏–Ω—è –º–∞—à–∏–Ω–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä—É—Ö");
      return;
    }
    
    // –ß–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ä—É—Ö —ñ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
    setTimeout(() => {
      setShowDirectionIndicator(false);
      moveBlueCar();
    }, 400);
  };
// –ß–∏ –ø—Ä–∞–≤–æ—Ä—É—á –≤—ñ–¥ –º–∞—à–∏–Ω–∏ –∂–æ–≤—Ç–∏–π –∫–≤–∞–¥—Ä–∞—Ç–∏–∫
  const hasYellowOnRight = (carPos) => {
    const [row, col] = carPos;
    const rightCol = col + 1;
    if (
      row >= 0 && row < grid.length &&
      rightCol >= 0 && rightCol < grid[0].length
    ) {
      return grid[row][rightCol] === 5;
    }
    return false;
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∏
  const renderCell = (type, row, col) => {
    const isRedCar = redCarPos[0] === row && redCarPos[1] === col;
    const isBlueCar = blueCarPos[0] === row && blueCarPos[1] === col;
    const isSquarePosition = squarePositions.some(
      ([squareRow, squareCol]) => squareRow === row && squareCol === col
    );
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–ª—ñ—Ç–∏–Ω–∫–∞ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–¥ —Å–∏–Ω—å–æ—é –º–∞—à–∏–Ω–æ—é
    const isBlueCarIndicator =
      blueCarPos[0] === 1 && blueCarPos[1] === 3 && row === 2 && col === 3;

    const isRedCarIndicator =
      redCarPos[0] === 4 && redCarPos[1] === 1 && row === 4 && col === 2;

    let cellClass =
      "w-12 h-12 flex items-center justify-center border border-gray-300 ";

    if (isRedCar) {
      cellClass += "bg-red-500 cursor-pointer";
    } else if (isBlueCar) {
      cellClass += "bg-blue-500 cursor-pointer";
    } else if (type === 0) {
      cellClass += "bg-green-100"; // —Ç—Ä–∞–≤–∞
    } else if (type === 1) {
      cellClass += "bg-gray-400"; // –¥–æ—Ä–æ–≥–∞
    } else if (type === 2) {
      cellClass += "bg-yellow-200"; // –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    } else if (type === 5) {
      cellClass += "bg-yellow-500"; // –∂–æ–≤—Ç–∏–π –∫–≤–∞–¥—Ä–∞—Ç–∏–∫
    } else if (type === 6) {
      cellClass += "bg-red-700"; // —á–µ—Ä–≤–æ–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç–∏–∫
    }

    return (
      <div
        key={`${row}-${col}`}
        className={cellClass}
        onClick={() => {
          if (isRedCar) {
            handleRedCarClick();
          } else if (isBlueCar) {
            handleBlueCarClick();
          } 
        }}
      >
        {isRedCar && "üöó"}
        {isBlueCar && "üöô"}
        {type === 5 && "üü®"}
        {type === 6 && "üü•"}

        {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–ø—Ä—è–º–∫—É –ø–µ—Ä–µ–¥ —Å–∏–Ω—å–æ—é –º–∞—à–∏–Ω–æ—é */}
        {isBlueCarIndicator && showDirectionIndicator && blueDirection === "left" && (
            <CornerDownRight size={24} />
          )}
        {isBlueCarIndicator && showDirectionIndicator && blueDirection === "right" && (
            <CornerDownLeft size={24}/>
          )}
        {isBlueCarIndicator && showDirectionIndicator && blueDirection === "straight" && (
            <MoveDown size={24} />
          )}

        {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–ø—Ä—è–º–∫—É –ø–µ—Ä–µ–¥ —á–µ—Ä–≤–æ–Ω–æ—é –º–∞—à–∏–Ω–æ—é */}
        {isRedCarIndicator && redDirection === "left" && (
          <CornerDownRight size={24} style={{ transform: "rotate(270deg)" }} />
        )}
        {isRedCarIndicator && redDirection === "right" && (
          <CornerDownLeft size={24} style={{ transform: "rotate(270deg)" }} />
        )}
        {isRedCarIndicator && redDirection === "straight" && (
          <MoveDown size={24} style={{ transform: "rotate(270deg)" }} />
        )}
      </div>
    );
  };

  return (
    <div className="p-4 space-y-4">
      <h2 className="text-xl font-semibold text-center">
        –°–∏–º—É–ª—è—Ü—ñ—è —Ä—É—Ö—É –Ω–∞ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—ñ
      </h2>

      <div className="grid grid-cols-8 gap-0 w-fit mx-auto">
        {grid.map((row, rowIndex) =>
          row.map((cell, colIndex) => renderCell(cell, rowIndex, colIndex))
        )}
      </div>

      <div className="text-center mt-4">
        <p className="text-sm text-gray-600 mb-2">
          –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –º–∞—à–∏–Ω—É, —â–æ–± –≤–æ–Ω–∞ –ø–æ—á–∞–ª–∞ —Ä—É—Ö
        </p>
        <p className="text-sm text-gray-600">
          –ß–µ—Ä–≤–æ–Ω–∞ –º–∞—à–∏–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ —Ä—É—Ö–∞—Ç–∏—Å—å –ø–µ—Ä—à–æ—é
        </p>
        <p className="text-sm text-gray-600 mt-2">
          –ù–∞–ø—Ä—è–º–æ–∫ —Ä—É—Ö—É –æ–±–∏—Ä–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —ñ –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –¥–ª—è —Å–∏–Ω—å–æ—ó –º–∞—à–∏–Ω–∫–∏
        </p>
        <p className="text-sm text-gray-600 mt-2">
          –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫, —â–æ–± –ø–µ—Ä–µ–º—ñ—à–∞—Ç–∏ –∫–æ–ª—å–æ—Ä–∏ —Ç–∞ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ —à–ª—è—Ö–∏
        </p>
      </div>

    </div>
  );
}