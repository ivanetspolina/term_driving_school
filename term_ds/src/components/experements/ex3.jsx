import { useState, useEffect } from "react";
import { toast, ToastContainer } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';

export default function Ex3() {
  // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Å—ñ—Ç–∫—É –∑–≥—ñ–¥–Ω–æ –∑ –Ω–∞–¥–∞–Ω–∏–º –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
  // 0 - —Ç—Ä–∞–≤–∞, 1 - –¥–æ—Ä–æ–≥–∞, 2 - –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è, 3 - —á–µ—Ä–≤–æ–Ω–∞ –º–∞—à–∏–Ω–∞, 4 - —Å–∏–Ω—è –º–∞—à–∏–Ω–∞
  const initialGrid = [
    [0, 0, 0, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0],
    [1, 1, 1, 2, 2, 1, 4, 1],
    [1, 3, 1, 2, 2, 1, 1, 1],
    [0, 0, 0, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0]
  ];

  const [grid, setGrid] = useState(initialGrid);
  const [redCarPos, setRedCarPos] = useState([4, 1]); // –ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è —á–µ—Ä–≤–æ–Ω–æ—ó –º–∞—à–∏–Ω–∏
  const [blueCarPos, setBlueCarPos] = useState([3, 6]); // –ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è —Å–∏–Ω—å–æ—ó –º–∞—à–∏–Ω–∏
  const [redFinished, setRedFinished] = useState(false);
  const [blueFinished, setBlueFinished] = useState(false);
  const [redDirection, setRedDirection] = useState(null);
  const [blueDirection, setBlueDirection] = useState(null);

  // –®–ª—è—Ö –¥–ª—è —á–µ—Ä–≤–æ–Ω–æ—ó –º–∞—à–∏–Ω–∏ (–ø–æ–≤–æ—Ä–æ—Ç –≤–ª—ñ–≤–æ)
  const redCarLeftPath = [
    [4, 2], // –≤–ø–µ—Ä–µ–¥ –¥–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [4, 3], // –≤–ø–µ—Ä–µ–¥ –¥–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [4, 4], // –≤ —Ü–µ–Ω—Ç—Ä –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [3, 4], // –ø–æ–≤–æ—Ä–æ—Ç –≤–ª—ñ–≤–æ
    [2, 4], // –≤–∏—ó–∑–¥ –∑ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [1, 4], // –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä—É—Ö—É –ø–æ –¥–æ—Ä–æ–∑—ñ
    [0, 4]  // –∫—ñ–Ω—Ü–µ–≤–∞ —Ç–æ—á–∫–∞
  ];

  // –®–ª—è—Ö –¥–ª—è —á–µ—Ä–≤–æ–Ω–æ—ó –º–∞—à–∏–Ω–∏ (–ø—Ä—è–º–∞)
  const redCarStraightPath = [
    [4, 2], // –≤–ø–µ—Ä–µ–¥ –¥–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [4, 3], // –≤–ø–µ—Ä–µ–¥ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [4, 4], // –≤ —Ü–µ–Ω—Ç—Ä –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [4, 5], // –≤–∏—ó–∑–¥ –∑ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [4, 6], // –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä—É—Ö—É –ø–æ –¥–æ—Ä–æ–∑—ñ
    [4, 7]  // –∫—ñ–Ω—Ü–µ–≤–∞ —Ç–æ—á–∫–∞
  ];

  // –®–ª—è—Ö –¥–ª—è —á–µ—Ä–≤–æ–Ω–æ—ó –º–∞—à–∏–Ω–∏ (–ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ)
  const redCarRightPath = [
    [4, 2], // –≤–ø–µ—Ä–µ–¥ –¥–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [4, 3], // –≤ —Ü–µ–Ω—Ç—Ä –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [5, 3], // –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ –Ω–∞ –±–ª–∏–∂–Ω—é —Å–º—É–≥—É
    [6, 3], // –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä—É—Ö—É
    [7, 3], // –∫—ñ–Ω—Ü–µ–≤–∞ —Ç–æ—á–∫–∞
  ];

  // –®–ª—è—Ö –¥–ª—è —Å–∏–Ω—å–æ—ó –º–∞—à–∏–Ω–∏ (–ø–æ–≤–æ—Ä–æ—Ç –≤–ª—ñ–≤–æ)
  const blueCarLeftPath = [
    [3, 5], // –≤–ø–µ—Ä–µ–¥ –¥–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [3, 4], // –≤ —Ü–µ–Ω—Ç—Ä –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [3, 3], // –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [4, 3], // –ø–æ–≤–æ—Ä–æ—Ç –≤–ª—ñ–≤–æ
    [5, 3], // –≤–∏—ó–∑–¥ –∑ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [6, 3], // –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä—É—Ö—É –ø–æ –¥–æ—Ä–æ–∑—ñ
    [7, 3]  // –∫—ñ–Ω—Ü–µ–≤–∞ —Ç–æ—á–∫–∞
  ];

  // –®–ª—è—Ö –¥–ª—è —Å–∏–Ω—å–æ—ó –º–∞—à–∏–Ω–∏ (–ø—Ä—è–º–∞)
  const blueCarStraightPath = [
    [3, 5], // –≤–ø–µ—Ä–µ–¥ –¥–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [3, 4], // –≤ —Ü–µ–Ω—Ç—Ä –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [3, 3], // –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä—É—Ö
    [3, 2], // –≤–∏—ó–∑–¥ –∑ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [3, 1], // –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä—É—Ö—É –ø–æ –¥–æ—Ä–æ–∑—ñ
    [3, 0]  // –∫—ñ–Ω—Ü–µ–≤–∞ —Ç–æ—á–∫–∞
  ];

  // –®–ª—è—Ö –¥–ª—è —Å–∏–Ω—å–æ—ó –º–∞—à–∏–Ω–∏ (–ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ)
  const blueCarRightPath = [
    [3, 5], // –≤–ø–µ—Ä–µ–¥ –¥–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [3, 4], // –≤ —Ü–µ–Ω—Ç—Ä –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    [2, 4], // –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ –Ω–∞ –±–ª–∏–∂–Ω—é —Å–º—É–≥—É
    [1, 4], // –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä—É—Ö—É
    [0, 4]  // –∫—ñ–Ω—Ü–µ–≤–∞ —Ç–æ—á–∫–∞
  ];

  // –ï—Ñ–µ–∫—Ç –¥–ª—è —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞ –∑–º—ñ–Ω–æ—é –Ω–∞–ø—Ä—è–º–∫—É —á–µ—Ä–≤–æ–Ω–æ—ó –º–∞—à–∏–Ω–∏
  useEffect(() => {
    if (redDirection !== null) {
      moveRedCar();
    }
  }, [redDirection]);

  // –ï—Ñ–µ–∫—Ç –¥–ª—è —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞ –∑–º—ñ–Ω–æ—é –Ω–∞–ø—Ä—è–º–∫—É —Å–∏–Ω—å–æ—ó –º–∞—à–∏–Ω–∏
  useEffect(() => {
    if (blueDirection !== null && redFinished) {
      moveBlueCar();
    }
  }, [blueDirection, redFinished]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –≤–∏–±–æ—Ä—É –Ω–∞–ø—Ä—è–º–∫—É
  const getRandomDirection = () => {
    const directions = ['straight', 'left', 'right'];
    const randomIndex = Math.floor(Math.random() * directions.length);
    return directions[randomIndex];
  };

  // –§—É–Ω–∫—Ü—ñ—è —Ä—É—Ö—É –º–∞—à–∏–Ω–∏
  const moveCar = (path, carType, setCarPos, onFinish) => {
    path.forEach(([row, col], i) => {
      setTimeout(() => {
        const curPos = carType === "red" ? redCarPos : blueCarPos;
        const newGrid = grid.map((r) => [...r]);
        const [curRow, curCol] = curPos;
        const cellType = getCellType(row, col);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ —Ä—É—Ö–∞—Ç–∏—Å—å –Ω–∞ —Ü—é –∫–ª—ñ—Ç–∏–Ω–∫—É (–¥–æ—Ä–æ–≥–∞ –∞–±–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è)
        const allowed = cellType === 1 || cellType === 2;

        if (!allowed) {
          toast.warn(`üö´ –ú–∞—à–∏–Ω–∞ –Ω–µ –º–æ–∂–µ —ó—Ö–∞—Ç–∏ –ø–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ: [${row}, ${col}]`);
          return;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—ñ—Ç–∫—É
        newGrid[curRow][curCol] = getCellType(curRow, curCol); // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–∏–ø –∫–ª—ñ—Ç–∏–Ω–∫–∏
        newGrid[row][col] = carType === "red" ? 3 : 4; // —Å—Ç–∞–≤–∏–º–æ –º–∞—à–∏–Ω—É –Ω–∞ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é

        setGrid(newGrid);
        setCarPos([row, col]);

        // –Ø–∫—â–æ —à–ª—è—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤–∏–∫–ª–∏–∫–∞—î–º–æ callback
        if (i === path.length - 1 && onFinish) {
          onFinish();
        }
      }, i * 600); // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫—Ä–æ–∫–∞–º–∏ —Ä—É—Ö—É
    });
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø—É –∫–ª—ñ—Ç–∏–Ω–∫–∏
  const getCellType = (row, col) => {
    if (row < 0 || col < 0 || row >= initialGrid.length || col >= initialGrid[0].length) {
      return 0; // –∑–∞ –º–µ–∂–∞–º–∏ —Å—ñ—Ç–∫–∏ - —Ç—Ä–∞–≤–∞
    }
    
    const cell = initialGrid[row][col];
    // –Ø–∫—â–æ —Ü–µ –º–∞—à–∏–Ω–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–∏–ø –∫–ª—ñ—Ç–∏–Ω–∫–∏ –ø—ñ–¥ –Ω–µ—é
    if (cell === 3 || cell === 4) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
      if ((row === 3 || row === 4) && (col === 3 || col === 4)) {
        return 2; // –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
      }
      return 1; // –¥–æ—Ä–æ–≥–∞
    }
    return cell;
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—Ö—É —á–µ—Ä–≤–æ–Ω–æ—ó –º–∞—à–∏–Ω–∏
  const moveRedCar = () => {
    // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ
    toast.dismiss();
    
    let directionText = '';
    if (redDirection === 'left') directionText = '–ª—ñ–≤–æ—Ä—É—á';
    else if (redDirection === 'right') directionText = '–ø—Ä–∞–≤–æ—Ä—É—á';
    else directionText = '–ø—Ä—è–º–æ';
    
    toast.info(`–ß–µ—Ä–≤–æ–Ω–∞ –º–∞—à–∏–Ω–∞ –ø–æ—á–∞–ª–∞ —Ä—É—Ö ${directionText}`);
    
    let path;
    if (redDirection === 'left') path = redCarLeftPath;
    else if (redDirection === 'right') path = redCarRightPath;
    else path = redCarStraightPath;
    
    moveCar(
      path, 
      "red", 
      setRedCarPos, 
      () => {
        setRedFinished(true);
        // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∑–∞–≤–µ—Ä—à–∞–ª—å–Ω–æ–≥–æ
        toast.dismiss();
        toast.success("–ß–µ—Ä–≤–æ–Ω–∞ –º–∞—à–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä—É—Ö");
      }
    );
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—Ö—É —Å–∏–Ω—å–æ—ó –º–∞—à–∏–Ω–∏
  const moveBlueCar = () => {
    // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ
    toast.dismiss();
    
    let directionText = '';
    if (blueDirection === 'left') directionText = '–ª—ñ–≤–æ—Ä—É—á';
    else if (blueDirection === 'right') directionText = '–ø—Ä–∞–≤–æ—Ä—É—á';
    else directionText = '–ø—Ä—è–º–æ';
    
    toast.info(`–°–∏–Ω—è –º–∞—à–∏–Ω–∞ –ø–æ—á–∞–ª–∞ —Ä—É—Ö ${directionText}`);
    
    let path;
    if (blueDirection === 'left') path = blueCarLeftPath;
    else if (blueDirection === 'right') path = blueCarRightPath;
    else path = blueCarStraightPath;
    
    moveCar(
      path, 
      "blue", 
      setBlueCarPos, 
      () => {
        setBlueFinished(true);
        // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∑–∞–≤–µ—Ä—à–∞–ª—å–Ω–æ–≥–æ
        toast.dismiss();
        toast.success("–°–∏–Ω—è –º–∞—à–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä—É—Ö");
      }
    );
  };

  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ —á–µ—Ä–≤–æ–Ω—É –º–∞—à–∏–Ω—É
  const handleRedCarClick = () => {
    if (redFinished) {
      // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ
      toast.dismiss();
      toast.info("–ß–µ—Ä–≤–æ–Ω–∞ –º–∞—à–∏–Ω–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä—É—Ö");
      return;
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –Ω–∞–ø—Ä—è–º–æ–∫ —Ä—É—Ö—É
    const direction = getRandomDirection();
    setRedDirection(direction);
  };

  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ —Å–∏–Ω—é –º–∞—à–∏–Ω—É
  const handleBlueCarClick = () => {
    // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ
    toast.dismiss();
    
    if (!redFinished) {
      toast.error("–ü–æ–º–∏–ª–∫–∞!!! –°–ø–æ—á–∞—Ç–∫—É –º–∞—î —Ä—É—Ö–∞—Ç–∏—Å—å —á–µ—Ä–≤–æ–Ω–∞ –º–∞—à–∏–Ω–∞.");
      return;
    }
    
    if (blueFinished) {
      toast.info("–°–∏–Ω—è –º–∞—à–∏–Ω–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä—É—Ö");
      return;
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –Ω–∞–ø—Ä—è–º–æ–∫ —Ä—É—Ö—É
    const direction = getRandomDirection();
    setBlueDirection(direction);
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∏
  const renderCell = (type, row, col) => {
    const isRedCar = redCarPos[0] === row && redCarPos[1] === col;
    const isBlueCar = blueCarPos[0] === row && blueCarPos[1] === col;
    
    let cellClass = "w-12 h-12 flex items-center justify-center border border-gray-300 ";
    
    if (isRedCar) {
      cellClass += "bg-red-500 cursor-pointer";
    } else if (isBlueCar) {
      cellClass += "bg-blue-500 cursor-pointer";
    } else if (type === 0) {
      cellClass += "bg-green-100"; // —Ç—Ä–∞–≤–∞
    } else if (type === 1) {
      cellClass += "bg-gray-400"; // –¥–æ—Ä–æ–≥–∞
    } else if (type === 2) {
      cellClass += "bg-yellow-200"; // –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è
    }
    
    return (
      <div 
        key={`${row}-${col}`}
        className={cellClass}
        onClick={() => {
          if (isRedCar) handleRedCarClick();
          if (isBlueCar) handleBlueCarClick();
        }}
      >
        {isRedCar && "üöó"}
        {isBlueCar && "üöô"}
      </div>
    );
  };

  return (
    <div className="p-4 space-y-4">
      <h2 className="text-xl font-semibold text-center">–°–∏–º—É–ª—è—Ü—ñ—è —Ä—É—Ö—É –Ω–∞ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—ñ</h2>
      
      <div className="grid grid-cols-8 gap-0 w-fit mx-auto">
        {grid.map((row, rowIndex) =>
          row.map((cell, colIndex) => renderCell(cell, rowIndex, colIndex))
        )}
      </div>
      
      <div className="text-center mt-4">
        <p className="text-sm text-gray-600 mb-2">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –º–∞—à–∏–Ω—É, —â–æ–± –≤–æ–Ω–∞ –ø–æ—á–∞–ª–∞ —Ä—É—Ö</p>
        <p className="text-sm text-gray-600">–ß–µ—Ä–≤–æ–Ω–∞ –º–∞—à–∏–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ —Ä—É—Ö–∞—Ç–∏—Å—å –ø–µ—Ä—à–æ—é</p>
        <p className="text-sm text-gray-600 mt-2">–ù–∞–ø—Ä—è–º–æ–∫ —Ä—É—Ö—É –æ–±–∏—Ä–∞—î—Ç—å—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∏–Ω–æ–º</p>
      </div>
      
      <ToastContainer 
        position="top-center"
        autoClose={2000}
        hideProgressBar={false}
        closeOnClick
        pauseOnHover
        draggable
        limit={1}
      />
    </div>
  );
}