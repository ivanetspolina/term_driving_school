export const getCellKey = (row, col) => `${row},${col}`;

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∏–ø –∫–ª—ñ—Ç–∏–Ω–∫–∏: 0 ‚Äî —Ç—Ä–∞–≤–∞, 1 ‚Äî –¥–æ—Ä–æ–≥–∞
export const getCellType = (grid, row, col) => {
  if (
    row < 0 ||
    col < 0 ||
    row >= grid.length ||
    col >= grid[0].length
  )
    return 0;

  const cell = grid[row][col];
  return (cell === 3 || cell === 4) ? 1 : cell;
};

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª—É –Ω–∞ –ø—Ä–æ—ó–∑–¥ –º–∞—Ä—à—Ä—É—Ç–æ–º (—Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä–∏)
export const isPathAllowed = (conditions, path) => {
  for (let [row, col] of path) {
    const key = `${row},${col}`;
    if (conditions[key]?.name === "red") {
      return { allowed: false, blockedAt: [row, col] };
    }
  }
  return { allowed: true };
};

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—ñ—Ç–∫–∏ –ø—Ä–∏ —Ä—É—Å—ñ –º–∞—à–∏–Ω–∏
export const updateGridWithCar = (grid, from, to, carColor) => {
  const newGrid = grid.map((row) => [...row]);

  const [fromRow, fromCol] = from;
  const [toRow, toCol] = to;

  const toCellType = getCellType(grid, toRow, toCol);
  if (toCellType !== 1) return null;

  newGrid[fromRow][fromCol] = getCellType(grid, fromRow, fromCol);
  newGrid[toRow][toCol] = carColor === "red" ? 3 : 4;

  return newGrid;
};

// –ó–Ω–∞–π—Ç–∏ –º–∞—à–∏–Ω—É –≤ –ø–µ–≤–Ω—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
export const findCarAt = (cars, row, col) => {
  return cars.find((c) => c.position[0] === row && c.position[1] === col);
};


export const calculateCarOrder = (questionData) => {
    console.log("questionData: ", questionData);
    const { cars, conditions} = questionData;
    const result = [];

  for (const car of cars) {
    const { path, id, color } = car;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–µ—Å—å —à–ª—è—Ö –º–∞—à–∏–Ω–∏ –Ω–∞ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä
    const { allowed } = isPathAllowed(conditions, path);

    if (!allowed) continue; // üö´ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –º–∞—à–∏–Ω—É –∑ —á–µ—Ä–≤–æ–Ω–∏–º –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ñ

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫
    const [firstRow, firstCol] = path[0];
    const key = `${firstRow},${firstCol}`;
    const condition = conditions?.name || "green";

    result.push({
      id,
      color,
      condition,
      priority: condition === "green" ? 0 : 1, // –∑–µ–ª–µ–Ω–∏–π ‚Äî –≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    });
  }

  // –°–æ—Ä—Ç—É—î–º–æ —Ç–∞–∫, —â–æ–± –º–∞—à–∏–Ω–∏ –∑ –∑–µ–ª–µ–Ω–∏–º —Å–≤—ñ—Ç–ª–æ–º –π—à–ª–∏ –ø–µ—Ä—à–∏–º–∏
  result.sort((a, b) => a.priority - b.priority);
  console.log("üö¶ Order:", result.map(c => c.id)); 
  return result.map((c) => c.id); // –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫, —è–∫—â–æ —Ç—Ä–µ–±–∞
};
